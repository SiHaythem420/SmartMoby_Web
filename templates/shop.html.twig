{% extends 'base.html.twig' %}

{% block title %}{{ 'app.shop.title'|trans }}{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
/* General Styles */
:root {
    --primary-color: #2196F3;
    --secondary-color: #1976D2;
    --success-color: #4CAF50;
    --warning-color: #FFC107;
    --danger-color: #F44336;
    --light-color: #F5F5F5;
    --dark-color: #212121;
    --text-color: #333;
    --border-radius: 8px;
    --box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    --transition: all 0.3s ease;
}

body {
    background-color: #f8f9fa;
    color: var(--text-color);
}

/* Map Styles */
#map {
    height: 500px;
    width: 100%;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    transition: var(--transition);
}

.map-container {
    position: relative;
    margin-bottom: 30px;
    border-radius: var(--border-radius);
    overflow: hidden;
}

.map-controls {
    position: absolute;
    top: 20px;
    left: 20px;
    z-index: 1000;
    background: rgba(255, 255, 255, 0.95);
    padding: 15px;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    width: 320px;
    backdrop-filter: blur(5px);
}

.input-container {
    position: relative;
    margin-bottom: 15px;
}

.input-container i {
    position: absolute;
    left: 12px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--primary-color);
    font-size: 1.1em;
}

.location-input {
    width: 100%;
    padding: 12px 12px 12px 40px;
    border: 2px solid #e0e0e0;
    border-radius: var(--border-radius);
    font-size: 14px;
    transition: var(--transition);
}

.location-input:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);
    outline: none;
}

.search-button, .clear-button {
    width: 100%;
    padding: 12px;
    border: none;
    border-radius: var(--border-radius);
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: var(--transition);
    margin-bottom: 10px;
}

.search-button {
    background-color: var(--primary-color);
    color: white;
}

.search-button:hover {
    background-color: var(--secondary-color);
    transform: translateY(-2px);
}

.clear-button {
    background-color: white;
    color: var(--text-color);
    border: 2px solid #e0e0e0;
}

.clear-button:hover {
    background-color: var(--light-color);
    border-color: var(--primary-color);
    color: var(--primary-color);
}

/* Card Styles */
.card {
    border: none;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    transition: var(--transition);
    overflow: hidden;
}

.card:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

.card-header {
    background-color: var(--primary-color);
    color: white;
    padding: 15px 20px;
    border-bottom: none;
}

.card-body {
    padding: 20px;
}

/* Product Card Styles */
.product-wap {
    position: relative;
    overflow: hidden;
}

.product-wap .card-img {
    height: 200px;
    object-fit: cover;
    transition: var(--transition);
}

.product-wap:hover .card-img {
    transform: scale(1.1);
}

.product-overlay {
    background: rgba(0,0,0,0.5);
    opacity: 0;
    transition: var(--transition);
}

.product-wap:hover .product-overlay {
    opacity: 1;
}

.product-overlay ul {
    transform: translateY(20px);
    transition: var(--transition);
}

.product-wap:hover .product-overlay ul {
    transform: translateY(0);
}

/* Filter Styles */
.templatemo-accordion {
    background: white;
    padding: 20px;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
}

.templatemo-accordion a {
    color: var(--text-color);
    transition: var(--transition);
}

.templatemo-accordion a:hover {
    color: var(--primary-color);
}

/* Pagination Styles */
.pagination {
    display: flex;
    justify-content: center;
    margin: 20px 0;
}

.pagination .page-item {
    margin: 0 2px;
}

.pagination .page-link {
    color: var(--primary-color);
    border: 1px solid #dee2e6;
    padding: 8px 16px;
    border-radius: 4px;
    transition: all 0.3s ease;
}

.pagination .page-link:hover {
    background-color: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
}

.pagination .page-item.active .page-link {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
    color: white;
}

.pagination .page-item.disabled .page-link {
    color: #6c757d;
    pointer-events: none;
    background-color: #fff;
    border-color: #dee2e6;
}

/* Statistics Section */
#statistics .card {
    height: 100%;
}

#statistics .card-header {
    font-weight: 600;
    letter-spacing: 0.5px;
}

#statistics .list-group-item {
    border: none;
    padding: 15px;
    transition: var(--transition);
}

#statistics .list-group-item:hover {
    background-color: var(--light-color);
}

/* Badge Styles */
.badge {
    padding: 8px 12px;
    font-weight: 500;
    border-radius: 20px;
}

/* Button Styles */
.btn {
    padding: 10px 20px;
    border-radius: var(--border-radius);
    font-weight: 600;
    transition: var(--transition);
}

.btn-primary {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
}

.btn-primary:hover {
    background-color: var(--secondary-color);
    border-color: var(--secondary-color);
    transform: translateY(-2px);
}

.btn-success {
    background-color: var(--success-color);
    border-color: var(--success-color);
}

.btn-success:hover {
    background-color: #43A047;
    border-color: #43A047;
    transform: translateY(-2px);
}

/* Form Styles */
.form-control {
    border: 2px solid #e0e0e0;
    border-radius: var(--border-radius);
    padding: 12px;
    transition: var(--transition);
}

.form-control:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);
}

/* Modal Styles */
.modal-content {
    border-radius: var(--border-radius);
    border: none;
    box-shadow: var(--box-shadow);
}

.modal-header {
    border-bottom: none;
    padding: 20px;
}

.modal-body {
    padding: 20px;
}

.modal-footer {
    border-top: none;
    padding: 20px;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
.map-controls {
        width: 90%;
        left: 5%;
    top: 10px;
    }
    
    .product-wap .card-img {
        height: 150px;
    }
}

/* Animation Classes */
.fade-in {
    animation: fadeIn 0.5s ease-in;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

/* Custom Scrollbar */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #f1f1f1;
}

::-webkit-scrollbar-thumb {
    background: var(--primary-color);
    border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
    background: var(--secondary-color);
}

/* Route Info Styles */
#route-info {
    position: absolute;
    top: 20px;
    right: 20px;
    background: rgba(255, 255, 255, 0.95);
    padding: 15px;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    z-index: 1000;
    display: none;
    width: 300px;
    max-height: 90vh;
    overflow-y: auto;
    backdrop-filter: blur(5px);
}

.route-details {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 10px;
    margin-top: 10px;
}

.route-detail {
    text-align: center;
    padding: 10px;
    background: var(--light-color);
    border-radius: var(--border-radius);
    transition: var(--transition);
}

.route-detail:hover {
    transform: translateY(-2px);
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.route-detail i {
    font-size: 1.2em;
    margin-bottom: 5px;
    color: var(--primary-color);
}

.route-detail .value {
    font-weight: bold;
    color: var(--primary-color);
    font-size: 1.1em;
}

.route-detail .label {
    font-size: 0.8em;
    color: var(--text-color);
}

.route-alternatives {
    margin-top: 15px;
    padding-top: 15px;
    border-top: 1px solid #eee;
}

.alternative-route {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    margin-bottom: 5px;
    background: var(--light-color);
    border-radius: var(--border-radius);
    cursor: pointer;
    transition: var(--transition);
}

.alternative-route:hover {
    background: #e9ecef;
    transform: translateX(5px);
}

.alternative-route.active {
    background: #e3f2fd;
    border-left: 3px solid var(--primary-color);
}

.route-instructions {
    margin-top: 15px;
    max-height: 300px;
    overflow-y: auto;
}

.instruction {
    display: flex;
    align-items: center;
    padding: 10px;
    border-bottom: 1px solid #eee;
    font-size: 0.9em;
    transition: var(--transition);
}

.instruction:hover {
    background: var(--light-color);
}

.instruction i {
    margin-right: 10px;
    color: var(--primary-color);
}

.instruction-text {
    flex: 1;
}

.instruction-distance {
    color: var(--text-color);
    font-size: 0.9em;
}

.close-route-info {
    position: absolute;
    top: 5px;
    right: 5px;
    background: none;
    border: none;
    font-size: 1.2em;
    cursor: pointer;
    color: var(--text-color);
    transition: var(--transition);
}

.close-route-info:hover {
    color: var(--primary-color);
    transform: rotate(90deg);
}

/* Favorites Section Styles */
.favorites-section {
    position: fixed;
    right: 20px;
    bottom: 80px;
    z-index: 1000;
    background: white;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    width: 300px;
    max-height: 400px;
    overflow: hidden;
    display: none;
    animation: slideIn 0.3s ease-out;
}

@keyframes slideIn {
    from {
        transform: translateY(100%);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

.favorites-header {
    background: var(--primary-color);
    color: white;
    padding: 15px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.favorites-header h5 {
    margin: 0;
    font-size: 1.1em;
}

.favorites-content {
    max-height: 300px;
    overflow-y: auto;
    padding: 10px;
}

.favorite-item {
    display: flex;
    align-items: center;
    padding: 10px;
    border-bottom: 1px solid #eee;
    transition: var(--transition);
}

.favorite-item:hover {
    background: var(--light-color);
}

.favorite-item img {
    width: 50px;
    height: 50px;
    object-fit: cover;
    border-radius: var(--border-radius);
    margin-right: 10px;
}

.favorite-item-info {
    flex: 1;
}

.favorite-item-title {
    font-weight: 600;
    margin-bottom: 5px;
}

.favorite-item-details {
    font-size: 0.8em;
    color: var(--text-color);
}

.favorite-item-remove {
    color: var(--danger-color);
    cursor: pointer;
    padding: 5px;
    transition: var(--transition);
}

.favorite-item-remove:hover {
    transform: scale(1.2);
}

.favorites-toggle {
    position: fixed;
    right: 20px;
    bottom: 20px;
    z-index: 1001;
    background: var(--primary-color);
    color: white;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    box-shadow: var(--box-shadow);
    transition: var(--transition);
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0% {
        box-shadow: 0 0 0 0 rgba(33, 150, 243, 0.4);
    }
    70% {
        box-shadow: 0 0 0 10px rgba(33, 150, 243, 0);
    }
    100% {
        box-shadow: 0 0 0 0 rgba(33, 150, 243, 0);
    }
}

.favorites-count {
    position: absolute;
    top: -5px;
    right: -5px;
    background: var(--danger-color);
    color: white;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    font-size: 0.8em;
    display: flex;
    align-items: center;
    justify-content: center;
}

/* Weather Card Styles */
.weather-card {
    background: linear-gradient(135deg, #6B73FF 0%, #000DFF 100%);
    border-radius: 15px;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    color: white;
    overflow: hidden;
    position: relative;
}

.weather-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
}

.weather-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 100%);
    z-index: 1;
}

.weather-card h5 {
    font-weight: 600;
    margin-bottom: 1rem;
    position: relative;
    z-index: 2;
}

.weather-icon {
    position: relative;
    z-index: 2;
    margin-bottom: 1rem;
}

.weather-icon img {
    width: 80px;
    height: 80px;
    filter: drop-shadow(0 4px 6px rgba(0, 0, 0, 0.1));
}

.weather-details {
    position: relative;
    z-index: 2;
}

.weather-details h3 {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.weather-details p {
    font-size: 1.1rem;
    margin-bottom: 0.5rem;
    opacity: 0.9;
}

.weather-details small {
    opacity: 0.8;
}

/* Weather History Styles */
#weatherHistory .list-group-item {
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 10px;
    margin-bottom: 0.5rem;
    transition: all 0.3s ease;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
}

#weatherHistory .list-group-item:hover {
    transform: translateX(5px);
    background: white;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

#weatherHistory .list-group-item h6 {
    color: #000DFF;
    font-weight: 600;
}

#weatherHistory .list-group-item small {
    color: #666;
}

#weatherHistory .list-group-item img {
    width: 40px;
    height: 40px;
    filter: drop-shadow(0 2px 3px rgba(0, 0, 0, 0.1));
}

/* Search Input Styles */
#weatherSearch {
    border: 2px solid #6B73FF;
    border-radius: 10px;
    padding: 10px 15px;
    transition: all 0.3s ease;
}

#weatherSearch:focus {
    border-color: #000DFF;
    box-shadow: 0 0 0 3px rgba(107, 115, 255, 0.2);
}

.btn-primary {
    background: linear-gradient(135deg, #6B73FF 0%, #000DFF 100%);
    border: none;
    border-radius: 10px;
    padding: 10px 20px;
    transition: all 0.3s ease;
}

.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(107, 115, 255, 0.3);
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .weather-card {
        margin-bottom: 1rem;
    }
    
    .weather-details h3 {
        font-size: 2rem;
    }
}
</style>

<!-- Add Leaflet.Search CSS and JS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet-search@3.0.2/dist/leaflet-search.min.css" />
<script src="https://unpkg.com/leaflet-search@3.0.2/dist/leaflet-search.min.js"></script>
{% endblock %}

{% block content %}
<!-- Start Content -->
<div class="container py-5">
    <!-- Map Interface -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0">
                <div class="card-header bg-primary text-white py-2">
                    <i class="fas fa-map-marked-alt me-2"></i>{{ 'map'|trans }}
                </div>
                <div class="card-body p-0">
                    <div class="map-container">
                        <div id="map"></div>
                        <div class="map-controls">
                            <div class="input-container">
                                <i class="fas fa-map-marker-alt text-success"></i>
                                <input type="text" 
                                       id="departure-input" 
                                       class="location-input" 
                                       placeholder="{{ 'app.shop.map.departure'|trans }}">
                            </div>
                            
                            <div class="input-container">
                                <i class="fas fa-map-marker-alt text-danger"></i>
                                <input type="text" 
                                       id="arrival-input" 
                                       class="location-input" 
                                       placeholder="{{ 'app.shop.map.arrival'|trans }}">
                            </div>
                            
                            <button type="button" class="search-button" id="search-trips">
                                <i class="fas fa-search me-1"></i>{{ 'app.shop.map.search'|trans }}
                            </button>

                            <button class="clear-button" id="clear-markers">
                                <i class="fas fa-times me-1"></i>{{ 'app.shop.map.clear'|trans }}
                            </button>
                            </div>
                        
                        <!-- Route Details Panel -->
                        <div id="route-info">
                        <button class="close-route-info" onclick="toggleRouteInfo()">
                            <i class="fas fa-times"></i>
                            </button>
                        <h6 class="mb-2">
                                <i class="fas fa-route text-primary me-2"></i>{{ 'app.shop.map.route_details'|trans }}
                        </h6>
                        <div class="route-details">
                            <div class="route-detail">
                                <i class="fas fa-road text-primary"></i>
                                <div class="value" id="route-distance">-</div>
                                    <div class="label">{{ 'app.shop.map.distance'|trans }}</div>
                        </div>
                            <div class="route-detail">
                                <i class="fas fa-clock text-primary"></i>
                                <div class="value" id="route-duration">-</div>
                                    <div class="label">{{ 'app.shop.map.duration'|trans }}</div>
                    </div>
                            <div class="route-detail">
                                <i class="fas fa-gas-pump text-primary"></i>
                                <div class="value" id="route-fuel">-</div>
                                    <div class="label">{{ 'app.shop.map.fuel_cost'|trans }}</div>
                </div>
                            <div class="route-detail">
                                <i class="fas fa-traffic-light text-primary"></i>
                                <div class="value" id="route-traffic">-</div>
                                    <div class="label">{{ 'app.shop.map.traffic'|trans }}</div>
                            </div>
                        </div>
                        
                        <div class="route-alternatives" id="route-alternatives">
                            <h6 class="mb-2">
                                    <i class="fas fa-random text-primary me-2"></i>{{ 'app.shop.map.alternative_routes'|trans }}
                            </h6>
                        </div>

                        <div class="route-instructions" id="route-instructions">
                            <h6 class="mb-2">
                                    <i class="fas fa-directions text-primary me-2"></i>{{ 'app.shop.map.directions'|trans }}
                            </h6>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Booking Modal -->
    <div class="modal fade" id="bookingModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-ticket-alt me-2"></i>Book Your Trip
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="trip-info mb-4">
                        <h6 class="text-primary mb-3">
                            <i class="fas fa-route me-2"></i>Trip Details
                        </h6>
                        <p><strong>From:</strong> <span id="modalDeparture"></span></p>
                        <p><strong>To:</strong> <span id="modalArrival"></span></p>
                        <p><strong>Date:</strong> <span id="modalDate"></span></p>
                        <p><strong>Time:</strong> <span id="modalTime"></span></p>
                        <p><strong>Price:</strong> <span id="modalPrice" class="text-success"></span> TND</p>
                    </div>
                    
                    <form id="bookingForm">
                        <div class="mb-3">
                            <label class="form-label">Your Name</label>
                            <input type="text" class="form-control" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Phone Number</label>
                            <input type="tel" class="form-control" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Number of Seats</label>
                            <input type="number" class="form-control" min="1" value="1" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-success" onclick="submitBooking()">
                        <i class="fas fa-check me-2"></i>Confirm Booking
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Floating Scroll Button -->
    <button onclick="window.scrollTo(0, document.body.scrollHeight);" 
            class="btn btn-primary rounded-circle position-fixed" 
            style="bottom: 20px; right: 20px; width: 50px; height: 50px; z-index: 1000;"
            title="View Statistics">
        <i class="fas fa-chart-bar"></i>
    </button>

    <!-- Search Form -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <form action="{{ path('app_shop') }}" method="GET" class="row g-3">
                        <div class="col-md-4">
                            <div class="input-group">
                                <span class="input-group-text bg-primary text-white">
                                    <i class="fas fa-map-marker-alt"></i>
                                </span>
                                <input type="text" class="form-control" name="departure" 
                                       placeholder="Departure Point" 
                                       value="{{ app.request.query.get('departure') }}">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="input-group">
                                <span class="input-group-text bg-primary text-white">
                                    <i class="fas fa-map-marker-alt"></i>
                                </span>
                                <input type="text" class="form-control" name="arrival" 
                                       placeholder="Arrival Point" 
                                       value="{{ app.request.query.get('arrival') }}">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <button type="submit" class="btn btn-primary w-100">
                                <i class="fas fa-search me-2"></i>Search Trips
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Advanced Search Modal -->
    <div class="modal fade" id="advancedSearchModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-search-plus me-2"></i>Advanced Search
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form action="{{ path('app_shop') }}" method="GET" id="advancedSearchForm">
                        <div class="row">
                            <!-- Date Range -->
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Date Range</label>
                                <div class="input-group">
                                    <input type="date" class="form-control" name="date_from" 
                                           value="{{ app.request.query.get('date_from') }}"
                                           min="{{ "now"|date("Y-m-d") }}">
                                    <span class="input-group-text">to</span>
                                    <input type="date" class="form-control" name="date_to" 
                                           value="{{ app.request.query.get('date_to') }}"
                                           min="{{ "now"|date("Y-m-d") }}">
                                </div>
                            </div>

                            <!-- Time Range -->
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Time Range</label>
                                <select class="form-select" name="time_range">
                                    <option value="">Any Time</option>
                                    <option value="morning" {% if app.request.query.get('time_range') == 'morning' %}selected{% endif %}>Morning (6:00 - 12:00)</option>
                                    <option value="afternoon" {% if app.request.query.get('time_range') == 'afternoon' %}selected{% endif %}>Afternoon (12:00 - 18:00)</option>
                                    <option value="evening" {% if app.request.query.get('time_range') == 'evening' %}selected{% endif %}>Evening (18:00 - 00:00)</option>
                                    <option value="night" {% if app.request.query.get('time_range') == 'night' %}selected{% endif %}>Night (00:00 - 6:00)</option>
                                </select>
                            </div>

                            <!-- Vehicle Types -->
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Vehicle Types</label>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="vehicle_types[]" value="Bus" 
                                           {% if 'Bus' in app.request.query.all('vehicle_types')|default([]) %}checked{% endif %}>
                                    <label class="form-check-label">Bus</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="vehicle_types[]" value="Métro" 
                                           {% if 'Métro' in app.request.query.all('vehicle_types')|default([]) %}checked{% endif %}>
                                    <label class="form-check-label">Métro</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="vehicle_types[]" value="Taxi" 
                                           {% if 'Taxi' in app.request.query.all('vehicle_types')|default([]) %}checked{% endif %}>
                                    <label class="form-check-label">Taxi</label>
                                </div>
                            </div>

                            <!-- Price Range -->
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Maximum Price (TND)</label>
                                <div class="input-group">
                                    <input type="number" class="form-control" name="max_price" min="0" step="0.5" 
                                           value="{{ app.request.query.get('max_price', '') }}"
                                           placeholder="Enter max price">
                                    <span class="input-group-text">TND</span>
                                </div>
                            </div>

                            <!-- Number of Stops -->
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Maximum Stops</label>
                                <select class="form-select" name="max_stops">
                                    <option value="">Any</option>
                                    <option value="0" {% if app.request.query.get('max_stops') == '0' %}selected{% endif %}>Direct</option>
                                    <option value="1" {% if app.request.query.get('max_stops') == '1' %}selected{% endif %}>1 Stop</option>
                                    <option value="2" {% if app.request.query.get('max_stops') == '2' %}selected{% endif %}>2 Stops</option>
                                    <option value="3" {% if app.request.query.get('max_stops') == '3' %}selected{% endif %}>3 Stops</option>
                                </select>
                            </div>

                            <!-- Departure and Arrival -->
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Departure Point</label>
                                <input type="text" class="form-control" name="departure" 
                                       value="{{ app.request.query.get('departure') }}"
                                       placeholder="Enter departure point">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Arrival Point</label>
                                <input type="text" class="form-control" name="arrival" 
                                       value="{{ app.request.query.get('arrival') }}"
                                       placeholder="Enter arrival point">
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="submitAdvancedSearch()">Search</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Advanced Search Button next to the search form -->
    <div class="col-md-4">
        <button type="button" class="btn btn-outline-primary w-100" data-bs-toggle="modal" data-bs-target="#advancedSearchModal">
            <i class="fas fa-search-plus me-2"></i>{{ 'app.shop.search.shorten_way'|trans }}
        </button>
    </div>

    <div class="row">
        <div class="col-lg-3">
            <br>
            <br>
            <br>
            <ul class="list-unstyled templatemo-accordion">
                <li class="pb-3">
                    <a class="collapsed d-flex justify-content-between h3 text-decoration-none" href="#">
                        {{ 'app.shop.filters.vehicle_type'|trans }}
                        <i class="fa fa-fw fa-chevron-circle-down mt-1"></i>
                    </a>
                    <ul class="collapse show list-unstyled pl-3">
                        <li>
                            <a class="text-decoration-none filter-link {% if vehicleType == 'Bus' %}text-success{% endif %}" 
                               href="#" data-filter="vehicle_type" data-value="Bus">
                                Bus
                            </a>
                        </li>
                        <li>
                            <a class="text-decoration-none filter-link {% if vehicleType == 'Métro' %}text-success{% endif %}" 
                               href="#" data-filter="vehicle_type" data-value="Métro">
                                Métro
                            </a>
                        </li>
                        <li>
                            <a class="text-decoration-none filter-link {% if vehicleType == 'Taxi' %}text-success{% endif %}" 
                               href="#" data-filter="vehicle_type" data-value="Taxi">
                                Taxi
                            </a>
                        </li>
                    </ul>
                </li>
                <li class="pb-3">
                    <a class="collapsed d-flex justify-content-between h3 text-decoration-none" href="#">
                        {{ 'app.shop.filters.time'|trans }}
                        <i class="pull-right fa fa-fw fa-chevron-circle-down mt-1"></i>
                    </a>
                    <ul id="collapseTwo" class="collapse list-unstyled pl-3">
                        <li>
                            <a class="text-decoration-none filter-link {% if timeFilter == 'all' %}text-success{% endif %}" 
                               href="#" data-filter="time" data-value="all">
                                {{ 'app.shop.filters.all'|trans }}
                            </a>
                        </li>
                        <li>
                            <a class="text-decoration-none filter-link {% if timeFilter == 'today' %}text-success{% endif %}" 
                               href="#" data-filter="time" data-value="today">
                                {{ 'app.shop.filters.today'|trans }}
                            </a>
                        </li>
                        <li>
                            <a class="text-decoration-none filter-link {% if timeFilter == 'tomorrow' %}text-success{% endif %}" 
                               href="#" data-filter="time" data-value="tomorrow">
                                {{ 'app.shop.filters.tomorrow'|trans }}
                            </a>
                        </li>
                    </ul>
                </li>
                <li class="pb-3">
                    <a class="collapsed d-flex justify-content-between h3 text-decoration-none" href="#">
                        {{ 'app.shop.filters.price_range'|trans }}
                        <i class="pull-right fa fa-fw fa-chevron-circle-down mt-1"></i>
                    </a>
                    <ul id="collapseThree" class="collapse list-unstyled pl-3">
                        <li>
                            <a class="text-decoration-none filter-link {% if priceRange == 'under_10' %}text-success{% endif %}" 
                               href="#" data-filter="price_range" data-value="under_10">
                                {{ 'app.shop.filters.under_10'|trans }}
                            </a>
                        </li>
                        <li>
                            <a class="text-decoration-none filter-link {% if priceRange == '10_15' %}text-success{% endif %}" 
                               href="#" data-filter="price_range" data-value="10_15">
                                {{ 'app.shop.filters.between_10_15'|trans }}
                            </a>
                        </li>
                        <li>
                            <a class="text-decoration-none filter-link {% if priceRange == 'over_20' %}text-success{% endif %}" 
                               href="#" data-filter="price_range" data-value="over_20">
                                {{ 'app.shop.filters.over_20'|trans }}
                            </a>
                        </li>
                    </ul>
                </li>
            </ul>
        </div>

        <div class="col-lg-9">
            <div class="row">
                <div class="col-md-6">
                    <ul class="list-inline shop-top-menu pb-3 pt-1">
                        <li class="list-inline-item">
                            <a class="h3 text-dark text-decoration-none mr-3" href="{{ path('app_shop', {'page': 1}) }}">
                                <br>
                                {{ 'app.shop.trip.details.all_trips'|trans }}
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="col-md-6 pb-4">
                    <div class="d-flex">
                        <select class="form-control" id="sort-select">
                            <option value="time" {% if sortBy == 'time' %}selected{% endif %}>
                                {{ 'app.shop.sort.time'|trans }}
                            </option>
                            <option value="price" {% if sortBy == 'price' %}selected{% endif %}>
                                {{ 'app.shop.sort.price'|trans }}
                            </option>
                            <option value="distance" {% if sortBy == 'distance' %}selected{% endif %}>
                                {{ 'app.shop.sort.distance'|trans }}
                            </option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- Trips Container -->
            <div id="trips-container">
                {% include 'shop/_trips_container.html.twig' with {'trajets': trajets} %}
            </div>
        </div>
    </div>

    <!-- Statistics Section -->
    <div id="statistics" class="row mt-5">
        <div class="col-12">
            <h2 class="h3 mb-4">{{ 'app.shop.statistics.title'|trans }}</h2>
            <div class="row">
                <!-- Weather Information -->
                <div class="col-md-12 mb-4">
                    <div class="card h-100">
                        <div class="card-header bg-info text-white">
                            <i class="fas fa-cloud-sun me-2"></i>{{ 'app.shop.statistics.weather'|trans }}
                        </div>
                        <div class="card-body">
                            <!-- Search Form -->
                            <div class="row mb-4">
                                <div class="col-md-6">
                                    <div class="input-group">
                                        <input type="text" id="weatherSearch" class="form-control" placeholder="{{ 'app.shop.weather.search'|trans }}">
                                    </div>
                                </div>
                            </div>

                            <!-- Weather Display -->
                            <div id="weatherDisplay" class="row">
                                {% for city, weather in stats.weatherData %}
                                    <div class="col-md-4 mb-3">
                                        <div class="weather-card p-3 text-center">
                                            <h5 class="mb-3">{{ city }}</h5>
                                            {% if weather.error is not defined %}
                                                <div class="weather-icon mb-2">
                                                    <img src="http://openweathermap.org/img/wn/{{ weather.weather[0].icon }}@2x.png" alt="{{ weather.weather[0].description }}">
                                                </div>
                                                <div class="weather-details">
                                                    <h3 class="mb-2">{{ weather.main.temp|round }}°C</h3>
                                                    <p class="mb-1">{{ weather.weather[0].description|capitalize }}</p>
                                                    <small class="text-muted">
                                                        {{ 'app.shop.weather.feels_like'|trans }}: {{ weather.main.feels_like|round }}°C
                                                    </small>
                                                    <div class="mt-2">
                                                        <small class="text-muted">
                                                            <i class="fas fa-wind"></i> {{ weather.wind.speed }} m/s
                                                            <i class="fas fa-tint ms-2"></i> {{ weather.main.humidity }}%
                                                        </small>
                                                    </div>
                                                </div>
                                            {% else %}
                                                <p class="text-muted">{{ weather.error }}</p>
                                            {% endif %}
                                        </div>
                                    </div>
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Most Popular Routes -->
                <div class="col-md-6 mb-4">
                    <div class="card h-100">
                        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                            <span><i class="fas fa-star me-2"></i>{{ 'app.shop.statistics.popular_routes'|trans }}</span>
                            <span class="badge bg-light text-primary">Top 5</span>
                        </div>
                        <div class="card-body">
                            <div class="list-group list-group-flush">
                                {% for route in stats.popularRoutes %}
                                <div class="list-group-item border-0 px-0">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h6 class="mb-0">
                                            <i class="fas fa-route text-primary me-2"></i>
                                            {{ route.pointDepart }} → {{ route.pointArrivee }}
                                        </h6>
                                        <span class="badge bg-primary">{{ route.tripCount }} {{ 'app.shop.trip.details.trips'|trans }}</span>
                                    </div>
                                    <div class="d-flex justify-content-between text-muted small">
                                        <span><i class="fas fa-road me-1"></i>{{ route.avgDistance|number_format(1) }} km en moyenne</span>
                                        <span>{{ ((route.tripCount / stats.totalTrips) * 100)|number_format(1) }}% des trajets</span>
                                    </div>
                                    <div class="progress mt-2" style="height: 5px;">
                                        <div class="progress-bar bg-primary" role="progressbar" 
                                             style="width: {{ ((route.tripCount / stats.totalTrips) * 100)|number_format(1) }}%" 
                                             aria-valuenow="{{ ((route.tripCount / stats.totalTrips) * 100)|number_format(1) }}" 
                                             aria-valuemin="0" 
                                             aria-valuemax="100"></div>
                                    </div>
                                </div>
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Vehicle Distribution -->
                <div class="col-md-6 mb-4">
                    <div class="card h-100">
                        <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                            <span><i class="fas fa-bus me-2"></i>{{ 'app.shop.statistics.vehicle_distribution'|trans }}</span>
                            <span class="badge bg-light text-success">{{ stats.totalTrips }} trajets total</span>
                        </div>
                        <div class="card-body">
                            <div class="list-group list-group-flush">
                                {% for stat in stats.vehicleStats %}
                                <div class="list-group-item border-0 px-0">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h6 class="mb-0">
                                            <i class="fas fa-{{ stat.type == 'Bus' ? 'bus' : (stat.type == 'Métro' ? 'train' : 'taxi') }} text-success me-2"></i>
                                            {{ stat.type }}
                                        </h6>
                                        <span class="badge bg-success">{{ stat.count }} {{ 'app.shop.trip.details.trips'|trans }}</span>
                                    </div>
                                    <div class="d-flex justify-content-between text-muted small">
                                        <span>{{ stat.percentage|number_format(1) }}% du total</span>
                                        <span>{{ (stat.count / stats.totalTrips * 100)|number_format(1) }}% de part de marché</span>
                                    </div>
                                    <div class="progress mt-2" style="height: 5px;">
                                        <div class="progress-bar bg-success" role="progressbar" 
                                             style="width: {{ stat.percentage|number_format(1) }}%" 
                                             aria-valuenow="{{ stat.percentage|number_format(1) }}" 
                                             aria-valuemin="0" 
                                             aria-valuemax="100"></div>
                                    </div>
                                </div>
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Favorites Section -->
    <div class="favorites-section" id="favorites-section">
        <div class="favorites-header">
            <h5><i class="fas fa-heart me-2"></i>My Favorites</h5>
            <button class="btn btn-sm btn-light" onclick="toggleFavorites()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="favorites-content" id="favorites-content">
            <!-- Favorites will be added here dynamically -->
        </div>
    </div>

    <button class="favorites-toggle" onclick="toggleFavorites()">
        <i class="fas fa-heart"></i>
        <span class="favorites-count" id="favorites-count">0</span>
    </button>
</div>
<!-- End Content -->
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
    let map;
    let routingControl;
    let departureMarker;
    let arrivalMarker;
    let currentRoute;
    let weatherSearchTimeout;
    let currentFilters = {
        vehicle_type: '{{ vehicleType|default('') }}',
        time: '{{ timeFilter|default('all') }}',
        price_range: '{{ priceRange|default('') }}',
        sort_by: '{{ sortBy|default('time') }}',
        page: 1
    };

    document.addEventListener('DOMContentLoaded', function() {
        // Initialize map centered on Tunis capital
        map = L.map('map', {
            zoomControl: false,
            scrollWheelZoom: true
        }).setView([36.8065, 10.1815], 12);

        // Add zoom control to the right side
        L.control.zoom({
            position: 'topright'
        }).addTo(map);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        // Add location control button
        const locationControl = L.control({position: 'topright'});
        locationControl.onAdd = function(map) {
            const div = L.DomUtil.create('div', 'leaflet-bar leaflet-control');
            div.innerHTML = `
                <a href="#" id="location-button" class="leaflet-control-button" 
                   style="width: 30px; height: 30px; line-height: 30px; display: block; text-align: center; 
                          background-color: white; border-radius: 4px; color: #666; text-decoration: none;">
                    <i class="fas fa-location-arrow"></i>
                </a>
            `;
            
            div.onclick = function(e) {
                e.preventDefault();
                locateUser();
            };
            return div;
        };
        locationControl.addTo(map);

        // Add user location marker variable
        let userLocationMarker = null;

        // Function to handle location finding
        function locateUser() {
            if (!navigator.geolocation) {
                alert('Geolocation is not supported by your browser');
                return;
            }

            const locationButton = document.getElementById('location-button');
            locationButton.style.color = '#2196F3'; // Change color to indicate loading

            navigator.geolocation.getCurrentPosition(
                (position) => {
                    const lat = position.coords.latitude;
                    const lng = position.coords.longitude;
                    const accuracy = position.coords.accuracy;

                    // Remove existing user location marker if it exists
                    if (userLocationMarker) {
                        map.removeLayer(userLocationMarker);
                    }

                    // Create a marker with a custom icon for user location
                    userLocationMarker = L.marker([lat, lng], {
                        icon: L.divIcon({
                            className: 'user-location-marker',
                            html: `<div style="
                                background-color: #2196F3;
                                border: 2px solid white;
                                border-radius: 50%;
                                width: 16px;
                                height: 16px;
                                box-shadow: 0 0 0 2px #2196F3;
                            "></div>
                            <div style="
                                background-color: rgba(33, 150, 243, 0.2);
                                border-radius: 50%;
                                width: ${accuracy / 10}px;
                                height: ${accuracy / 10}px;
                                position: absolute;
                                top: 50%;
                                left: 50%;
                                transform: translate(-50%, -50%);
                                z-index: -1;
                            "></div>`
                        })
                    }).addTo(map);

                    // Center map on user location
                    map.setView([lat, lng], 15);
                    
                    // Perform reverse geocoding to get the address
                    fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&addressdetails=1`)
                        .then(response => response.json())
                        .then(data => {
                            if (data && data.display_name) {
                                // Update the departure input with the current location address
                                const departureInput = document.getElementById('departure-input');
                                departureInput.value = data.display_name;
                                
                                // Create departure marker
                                if (departureMarker) map.removeLayer(departureMarker);
                                departureMarker = L.marker([lat, lng], {
                                    icon: L.icon({
                                        iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
                                        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                                        iconSize: [25, 41],
                                        iconAnchor: [12, 41],
                                        popupAnchor: [1, -34],
                                        shadowSize: [41, 41]
                                    })
                                }).addTo(map);

                                // Update route if arrival marker exists
                                if (arrivalMarker) {
                                    updateRoute();
                                }
                            }
                        })
                        .catch(error => {
                            console.error('Error getting address:', error);
                        })
                        .finally(() => {
                            // Reset button color
                            locationButton.style.color = '#666';
                        });
                },
                (error) => {
                    let message = 'Unable to get your location';
                    switch(error.code) {
                        case error.PERMISSION_DENIED:
                            message = 'Please enable location access in your browser settings.';
                            break;
                        case error.POSITION_UNAVAILABLE:
                            message = 'Location information is unavailable.';
                            break;
                        case error.TIMEOUT:
                            message = 'Location request timed out.';
                            break;
                    }
                    alert(message);
                    locationButton.style.color = '#666';
                },
                {
                    enableHighAccuracy: true,
                    timeout: 5000,
                    maximumAge: 0
                }
            );
        }

        // Add CSS for the location button hover effect
        const style = document.createElement('style');
        style.textContent = `
            #location-button:hover {
                background-color: #f4f4f4 !important;
                color: #2196F3 !important;
            }
        `;
        document.head.appendChild(style);

        // Initialize routing control with more options
        routingControl = L.Routing.control({
            show: false,
            addWaypoints: false,
            draggableWaypoints: false,
            lineOptions: {
                styles: [{color: '#2196F3', weight: 4, opacity: 0.7}]
            },
            createMarker: function() { return null; },
            routeWhileDragging: false,
            showAlternatives: true,
            altLineOptions: {
                styles: [{color: '#666', weight: 4, opacity: 0.7}]
            }
        }).on('routesfound', function(e) {
            const routes = e.routes;
            currentRoute = routes[0];
            
            // Update main route info
            updateRouteInfo(currentRoute);
            
            // Show alternative routes
            showAlternativeRoutes(routes);
            
            // Show turn-by-turn directions
            showRouteInstructions(currentRoute);
            
            // Show route info panel
            document.getElementById('route-info').style.display = 'block';
        }).addTo(map);

        // Add event listeners for input fields
        const departureInput = document.getElementById('departure-input');
        const arrivalInput = document.getElementById('arrival-input');

        function searchLocation(query, isDeparture) {
            if (query.length < 3) return;

            fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&countrycodes=tn&limit=1`)
                .then(response => response.json())
                .then(data => {
                    if (data && data.length > 0) {
                        const result = data[0];
                        const latlng = L.latLng(result.lat, result.lon);
                        
                        // Create marker
                        const marker = L.marker(latlng, {
                            icon: L.icon({
                                iconUrl: isDeparture ? 
                                    'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png' : 
                                    'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
                                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                                iconSize: [25, 41],
                                iconAnchor: [12, 41],
                                popupAnchor: [1, -34],
                                shadowSize: [41, 41]
                            })
                        });

                        // Remove existing marker if any
                        if (isDeparture) {
                            if (departureMarker) map.removeLayer(departureMarker);
                            departureMarker = marker;
                        } else {
                            if (arrivalMarker) map.removeLayer(arrivalMarker);
                            arrivalMarker = marker;
                        }

                        // Add marker and center map
                        marker.addTo(map);
                        map.setView(latlng, 15);

                        // Update route if both markers exist
                        if (departureMarker && arrivalMarker) {
                            updateRoute();
                        }
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        // Add debounced search function
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        const debouncedSearch = debounce(searchLocation, 500);

        departureInput.addEventListener('input', function() {
            debouncedSearch(this.value, true);
        });

        arrivalInput.addEventListener('input', function() {
            debouncedSearch(this.value, false);
        });

        // Add event listeners for buttons
        document.getElementById('search-trips').addEventListener('click', function() {
            const departure = departureInput.value;
            const arrival = arrivalInput.value;

            if (!departure || !arrival) {
                alert('Please enter both departure and arrival points');
                return;
            }

            window.location.href = `{{ path('app_shop') }}?departure=${encodeURIComponent(departure)}&arrival=${encodeURIComponent(arrival)}`;
        });

        document.getElementById('clear-markers').addEventListener('click', function() {
            if (departureMarker) {
                map.removeLayer(departureMarker);
                departureMarker = null;
            }
            if (arrivalMarker) {
                map.removeLayer(arrivalMarker);
                arrivalMarker = null;
            }
            routingControl.setWaypoints([]);
            departureInput.value = '';
            arrivalInput.value = '';
            map.setView([36.8065, 10.1815], 12);
        });
        
        // Weather search functionality
        const weatherSearchInput = document.getElementById('weatherSearch');
        if (weatherSearchInput) {
            weatherSearchInput.addEventListener('input', function() {
                clearTimeout(weatherSearchTimeout);
                const city = this.value.trim();
                
                if (city.length >= 3) { // Only search if at least 3 characters
                    weatherSearchTimeout = setTimeout(() => {
                        searchWeather(city);
                    }, 500); // Wait 500ms after user stops typing
                }
            });
        }

        // Add event listeners for filter links
        document.querySelectorAll('.filter-link').forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                
                // Remove active class from all links in the same filter group
                const filterType = this.getAttribute('data-filter');
                document.querySelectorAll(`.filter-link[data-filter="${filterType}"]`).forEach(el => {
                    el.classList.remove('text-success');
                });
                
                // Add active class to clicked link
                this.classList.add('text-success');
                
                // Update current filters
                const filterValue = this.getAttribute('data-value');
                currentFilters[filterType] = filterValue;
                currentFilters.page = 1; // Reset to first page when filter changes
                
                // Apply filters
                applyFilters();
            });
        });

        // Add event listener for sort select
        document.getElementById('sort-select').addEventListener('change', function() {
            currentFilters.sort_by = this.value;
            currentFilters.page = 1; // Reset to first page when sort changes
            applyFilters();
        });

        // Function to apply filters via AJAX
        function applyFilters() {
            // Show loading indicator
            document.getElementById('trips-container').innerHTML = '<div class="col-12 text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
            
            // Build query string
            const queryParams = new URLSearchParams();
            for (const [key, value] of Object.entries(currentFilters)) {
                if (value) {
                    queryParams.append(key, value);
                }
            }
            
            // Make AJAX request
            fetch(`{{ path('app_shop') }}?${queryParams.toString()}`, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                // Create a temporary container to parse the HTML
                const tempContainer = document.createElement('div');
                tempContainer.innerHTML = html;
                
                // Extract trips container and pagination
                const newTripsContainer = tempContainer.querySelector('#trips-container');
                const newPaginationContainer = tempContainer.querySelector('#pagination-container');
                
                // Update the DOM
                if (newTripsContainer) {
                    document.getElementById('trips-container').innerHTML = newTripsContainer.innerHTML;
                }
                
                if (newPaginationContainer) {
                    document.getElementById('pagination-container').innerHTML = newPaginationContainer.innerHTML;
                }
                
                // Update URL without reloading the page
                const newUrl = `${window.location.pathname}?${queryParams.toString()}`;
                window.history.pushState({ path: newUrl }, '', newUrl);
                
                // Reinitialize event listeners for the new content
                initializeTripCardListeners();
            })
            .catch(error => {
                console.error('Error applying filters:', error);
                document.getElementById('trips-container').innerHTML = '<div class="col-12 text-center"><p class="text-danger">Error loading trips. Please try again.</p></div>';
            });
        }

        // Function to initialize event listeners for trip cards
        function initializeTripCardListeners() {
            // Add event listeners for booking buttons
            document.querySelectorAll('.btn-success[onclick="showBookingModal(this)"]').forEach(button => {
                button.addEventListener('click', function() {
                    showBookingModal(this);
                });
            });
            
            // Add event listeners for heart icons
            document.querySelectorAll('.fa-heart').forEach(icon => {
                icon.addEventListener('click', function(e) {
                    e.preventDefault();
                    this.classList.toggle('text-danger');
                    const tripId = this.closest('.product-wap').getAttribute('data-trip-id');
                    addToFavorites(tripId, {
                        departure: this.closest('.product-wap').dataset.departure,
                        arrival: this.closest('.product-wap').dataset.arrival,
                        date: this.closest('.product-wap').dataset.date,
                        time: this.closest('.product-wap').dataset.time,
                        price: this.closest('.product-wap').dataset.price
                    });
                });
            });
        }

        // Initialize event listeners for trip cards
        initializeTripCardListeners();
    });

    function updateRoute() {
        if (!departureMarker || !arrivalMarker) {
            document.getElementById('route-info').style.display = 'none';
            return;
        }

        const waypoints = [
            L.latLng(departureMarker.getLatLng()),
            L.latLng(arrivalMarker.getLatLng())
        ];

        routingControl.setWaypoints(waypoints);
        
        const bounds = L.latLngBounds([departureMarker.getLatLng(), arrivalMarker.getLatLng()]);
        map.fitBounds(bounds, {
            padding: [50, 50]
        });
    }

    function updateRouteInfo(route) {
        const distance = (route.summary.totalDistance / 1000).toFixed(1);
        const duration = Math.round(route.summary.totalTime / 60);
        const fuelCost = calculateFuelCost(route.summary.totalDistance);
        const traffic = getTrafficCondition(route);
        
        document.getElementById('route-distance').textContent = `${distance} km`;
        document.getElementById('route-duration').textContent = `${duration} min`;
        document.getElementById('route-fuel').textContent = `${fuelCost} TND`;
        document.getElementById('route-traffic').textContent = traffic;
        
        // Show route info panel
        document.getElementById('route-info').style.display = 'block';
    }

    function showAlternativeRoutes(routes) {
        const alternativesContainer = document.getElementById('route-alternatives');
        alternativesContainer.innerHTML = '<h6 class="mb-2"><i class="fas fa-random text-primary me-2"></i>Alternative Routes</h6>';
        
        routes.forEach((route, index) => {
            const distance = (route.summary.totalDistance / 1000).toFixed(1);
            const duration = Math.round(route.summary.totalTime / 60);
            
            const alternative = document.createElement('div');
            alternative.className = `alternative-route ${index === 0 ? 'active' : ''}`;
            alternative.innerHTML = `
                <div>
                    <i class="fas fa-route"></i>
                    <span>Route ${index + 1}</span>
                </div>
                <div>
                    <span class="me-2">${distance} km</span>
                    <span>${duration} min</span>
                </div>
            `;
            
            alternative.addEventListener('click', () => {
                document.querySelectorAll('.alternative-route').forEach(r => r.classList.remove('active'));
                alternative.classList.add('active');
                updateRouteInfo(route);
                showRouteInstructions(route);
            });
            
            alternativesContainer.appendChild(alternative);
        });
    }

    function showRouteInstructions(route) {
        const instructionsContainer = document.getElementById('route-instructions');
        instructionsContainer.innerHTML = '<h6 class="mb-2"><i class="fas fa-directions text-primary me-2"></i>Turn-by-Turn Directions</h6>';
        
        route.instructions.forEach(instruction => {
            const instructionElement = document.createElement('div');
            instructionElement.className = 'instruction';
            
            const icon = getDirectionIcon(instruction.type);
            const distance = (instruction.distance / 1000).toFixed(1);
            
            instructionElement.innerHTML = `
                <i class="fas ${icon}"></i>
                <div class="instruction-text">${instruction.text}</div>
                <div class="instruction-distance">${distance} km</div>
            `;
            
            instructionsContainer.appendChild(instructionElement);
        });
    }

    function calculateFuelCost(distance) {
        // Assuming average fuel consumption of 7L/100km and fuel price of 2.5 TND/L
        const fuelConsumption = (distance / 1000) * 7 / 100;
        return (fuelConsumption * 2.5).toFixed(2);
    }

    function getTrafficCondition(route) {
        // Simple traffic condition based on route duration
        const speed = route.summary.totalDistance / route.summary.totalTime;
        if (speed < 5) return 'Heavy';
        if (speed < 10) return 'Moderate';
        return 'Light';
    }

    function getDirectionIcon(type) {
        const icons = {
            'Straight': 'fa-arrow-up',
            'SlightRight': 'fa-arrow-turn-up',
            'Right': 'fa-arrow-right',
            'SharpRight': 'fa-arrow-right',
            'TurnRight': 'fa-arrow-right',
            'SlightLeft': 'fa-arrow-turn-up',
            'Left': 'fa-arrow-left',
            'SharpLeft': 'fa-arrow-left',
            'TurnLeft': 'fa-arrow-left',
            'WaypointReached': 'fa-flag-checkered',
            'Roundabout': 'fa-circle',
            'DestinationReached': 'fa-flag-checkered'
        };
        return icons[type] || 'fa-arrow-up';
    }

    function toggleRouteInfo() {
        const routeInfo = document.getElementById('route-info');
        routeInfo.style.display = routeInfo.style.display === 'none' ? 'block' : 'none';
    }

    // Favorites functionality
    let favorites = new Set();

    function toggleFavorites() {
        const favoritesSection = document.getElementById('favorites-section');
        const isHidden = favoritesSection.style.display === 'none';
        favoritesSection.style.display = isHidden ? 'block' : 'none';
        
        // Add animation class
        if (isHidden) {
            favoritesSection.classList.add('fade-in');
        }
    }

    // Initialize favorites from localStorage if available
    document.addEventListener('DOMContentLoaded', function() {
        const savedFavorites = localStorage.getItem('favorites');
        if (savedFavorites) {
            favorites = new Set(JSON.parse(savedFavorites));
            updateFavoritesUI();
            updateFavoritesCount();
        }

        // Update the trip card HTML to include data attributes and heart icon functionality
        const tripCards = document.querySelectorAll('.product-wap');
        tripCards.forEach(card => {
            const tripId = card.querySelector('a').href.split('/').pop();
            card.setAttribute('data-trip-id', tripId);
            
            const heartIcon = card.querySelector('.fa-heart');
            if (heartIcon) {
                // Check if this trip is already favorited
                if (favorites.has(tripId)) {
                    heartIcon.classList.add('text-danger');
                }

                heartIcon.addEventListener('click', function(e) {
                    e.preventDefault();
                    this.classList.toggle('text-danger');
                    addToFavorites(tripId, {
                        departure: card.dataset.departure,
                        arrival: card.dataset.arrival,
                        date: card.dataset.date,
                        time: card.dataset.time,
                        price: card.dataset.price
                    });
                });
            }
        });
    });

    function addToFavorites(tripId, tripData) {
        if (favorites.has(tripId)) {
            favorites.delete(tripId);
        } else {
            favorites.add(tripId);
        }
        updateFavoritesUI();
        updateFavoritesCount();
        
        // Save to localStorage
        localStorage.setItem('favorites', JSON.stringify([...favorites]));
    }

    function updateFavoritesUI() {
        const favoritesContent = document.getElementById('favorites-content');
        favoritesContent.innerHTML = '';
        
        favorites.forEach(tripId => {
            const trip = document.querySelector(`[data-trip-id="${tripId}"]`);
            if (trip) {
                const tripData = {
                    id: tripId,
                    departure: trip.dataset.departure,
                    arrival: trip.dataset.arrival,
                    date: trip.dataset.date,
                    time: trip.dataset.time,
                    price: trip.dataset.price,
                    image: trip.querySelector('img').src
                };
                
                const favoriteItem = document.createElement('div');
                favoriteItem.className = 'favorite-item';
                favoriteItem.innerHTML = `
                    <img src="${tripData.image}" alt="Trip Image">
                    <div class="favorite-item-info">
                        <div class="favorite-item-title">${tripData.departure} → ${tripData.arrival}</div>
                        <div class="favorite-item-details">
                            <div>${tripData.date} at ${tripData.time}</div>
                            <div>${tripData.price} TND</div>
                        </div>
                    </div>
                    <div class="favorite-item-remove" onclick="removeFromFavorites('${tripId}')">
                        <i class="fas fa-times"></i>
                    </div>
                `;
                favoritesContent.appendChild(favoriteItem);
            }
        });
    }

    function removeFromFavorites(tripId) {
        favorites.delete(tripId);
        updateFavoritesUI();
        updateFavoritesCount();
        
        // Update heart icon in the trip card
        const heartIcon = document.querySelector(`[data-trip-id="${tripId}"] .fa-heart`);
        if (heartIcon) {
            heartIcon.classList.remove('text-danger');
        }
    }

    function updateFavoritesCount() {
        document.getElementById('favorites-count').textContent = favorites.size;
    }

    // Weather Search Functionality
    async function searchWeather(city) {
        if (!city) {
            return;
        }

        try {
            const response = await fetch(`/weather/search?city=${encodeURIComponent(city)}`);
            const data = await response.json();
            
            if (data.error) {
                throw new Error(data.error);
            }

            const weatherDisplay = document.getElementById('weatherDisplay');
            weatherDisplay.innerHTML = `
                <div class="col-md-4 mb-3">
                    <div class="weather-card p-3 text-center">
                        <h5 class="mb-3">${data.name}</h5>
                        <div class="weather-icon mb-2">
                            <img src="http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png" alt="${data.weather[0].description}">
                        </div>
                        <div class="weather-details">
                            <h3 class="mb-2">${Math.round(data.main.temp)}°C</h3>
                            <p class="mb-1">${data.weather[0].description.charAt(0).toUpperCase() + data.weather[0].description.slice(1)}</p>
                            <small class="text-muted">
                                Feels like: ${Math.round(data.main.feels_like)}°C
                            </small>
                            <div class="mt-2">
                                <small class="text-muted">
                                    <i class="fas fa-wind"></i> ${data.wind.speed} m/s
                                    <i class="fas fa-tint ms-2"></i> ${data.main.humidity}%
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        } catch (error) {
            const weatherDisplay = document.getElementById('weatherDisplay');
            weatherDisplay.innerHTML = `
                <div class="col-12 text-center">
                    <p class="text-danger">{{ 'app.shop.weather.error'|trans }}</p>
                </div>
            `;
        }
    }

    function submitAdvancedSearch() {
        const form = document.getElementById('advancedSearchForm');
        const formData = new FormData(form);
        const url = new URL(window.location.href);
        
        // Clear existing parameters
        url.search = '';
        
        // Add form data to URL only if values are not empty
        for (let [key, value] of formData.entries()) {
            if (value && value.trim() !== '') {
                if (key === 'vehicle_types[]') {
                    // Handle multiple vehicle types
                    if (!url.searchParams.has('vehicle_types[]')) {
                        url.searchParams.append('vehicle_types[]', value);
                    }
                } else {
                    url.searchParams.append(key, value);
                }
            }
        }
        
        // Reset to first page
        url.searchParams.set('page', '1');
        
        // Show loading indicator
        document.getElementById('trips-container').innerHTML = `
            <div class="col-12 text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        `;
        
        // Make AJAX request
        fetch(url.toString(), {
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Accept': 'text/html'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.text();
        })
        .then(html => {
            if (!html || html.trim() === '') {
                throw new Error('Empty response received');
            }
            
            // Create a temporary container to parse the HTML
            const tempContainer = document.createElement('div');
            tempContainer.innerHTML = html;
            
            // Check if the response contains the trips container
            const newTripsContainer = tempContainer.querySelector('#trips-container');
            if (!newTripsContainer) {
                throw new Error('Invalid response format');
            }
            
            // Update trips container
            document.getElementById('trips-container').innerHTML = newTripsContainer.innerHTML;
            
            // Update URL without reloading the page
            window.history.pushState({ path: url.toString() }, '', url.toString());
            
            // Reinitialize event listeners
            if (typeof initializeTripCardListeners === 'function') {
                initializeTripCardListeners();
            } else {
                console.warn('initializeTripCardListeners function not found');
            }
        })
        .catch(error => {
            console.error('Error details:', error);
            document.getElementById('trips-container').innerHTML = `
                <div class="col-12 text-center">
                    <p class="text-danger">
                        <i class="fas fa-exclamation-circle me-2"></i>
                        Error loading trips: ${error.message}
                    </p>
                    <button class="btn btn-primary mt-3" onclick="submitAdvancedSearch()">
                        <i class="fas fa-redo me-2"></i>Try Again
                    </button>
                </div>
            `;
        })
        .finally(() => {
            // Close modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('advancedSearchModal'));
            if (modal) {
                modal.hide();
            }
        });
    }

    // Initialize event listeners when the document is ready
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize trip card listeners
        initializeTripCardListeners();
        
        // Add event listeners for filter links
        document.querySelectorAll('.filter-link').forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                const filterType = this.getAttribute('data-filter');
                const filterValue = this.getAttribute('data-value');
                
                // Update URL with new parameters
                const url = new URL(window.location.href);
                url.searchParams.set(filterType, filterValue);
                url.searchParams.set('page', '1'); // Reset to first page
                
                // Load trips with new filters
                loadTrips(url.toString());
            });
        });

        // Add event listener for sort select
        document.getElementById('sort-select').addEventListener('change', function() {
            const url = new URL(window.location.href);
            url.searchParams.set('sort_by', this.value);
            url.searchParams.set('page', '1');
            loadTrips(url.toString());
        });
    });
</script>
{% endblock %} 